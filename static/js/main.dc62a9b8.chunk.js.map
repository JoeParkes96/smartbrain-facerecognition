{"version":3,"sources":["serviceWorker.js","components/imageLinkSubmitter/ImageLinkSubmitter.js","components/logo/Logo.js","components/navigation/Navigation.js","components/recognitionImage/RecognitionImage.js","components/register/Register.js","components/signIn/SignIn.js","components/userRank/UserRank.js","App.js","index.js","components/logo/logo_transparent.png"],"names":["Boolean","window","location","hostname","match","ImageLinkSubmitter","onInputChange","onSubmit","className","type","onChange","onClick","Logo","src","logo","alt","Navigation","onChangeRoute","isSignedIn","RecognitionImage","imageURL","box","id","style","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","validEmailRegex","RegExp","Register","props","onRegister","validateForm","state","validationErrors","fetch","method","headers","body","JSON","stringify","name","email","password","then","response","json","user","loadUser","catch","err","console","log","error","onNameChange","event","validateInputChange","setState","target","value","onEmailChange","onPasswordChange","errors","isNameValid","length","message","display","isEmailValid","test","isPasswordValid","Error","valid","Object","values","forEach","getInputStateClass","isError","nameErrors","this","emailErrors","passwordErrors","htmlFor","Component","SignIn","clearCredentialsErrorsState","responseJson","handleSignInResponse","credentialsErrors","required","UserRank","submissions","particleParameters","particles","line_linked","shadow","enable","color","blur","number","density","value_area","initialState","input","route","routes","dateJoined","App","data","updateUserSubmissionCount","count","assign","calculateFaceLocation","boundingBox","outputs","regions","region_info","bounding_box","inputtedImage","document","getElementById","imageWidth","Number","width","imageHeight","height","left_col","top_row","right_col","bottom_row","includes","setBoxLocation","onImageSubmit","params","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.dc62a9b8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './ImageLinkSubmitter.css';\n\nimport React from 'react';\n\nconst ImageLinkSubmitter = ({ onInputChange, onSubmit }) => {\n    return (\n        <div className=\"image-link-submitter\">\n            <p className=\"descriptive-text\">\n                {'Provide an image URL and I will detect the face'}\n            </p>\n            <div className=\"input-section center\">\n                <div className=\"form-wrapper center\">\n                    <input type=\"text\" className=\"image-link-input center\" onChange={onInputChange}></input>\n                    <button className=\"image-submit-button center\" onClick={onSubmit}>Submit</button>\n                </div>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default ImageLinkSubmitter;","import './Logo.css';\n\nimport React from 'react';\nimport logo from './logo_transparent.png';\n\nconst Logo = () => {\n    return (\n        <div className=\"logo-container\">\n            <img src={logo} alt=\"logo\" className=\"logo-image\"/>\n        </div>\n        \n    )\n}\n\nexport default Logo;","import './Navigation.css';\n\nimport React from 'react';\n\nconst Navigation = ( { onChangeRoute, isSignedIn }) => {\n    if(isSignedIn) {\n      return (\n        <nav className=\"nav-bar\">\n            <button className=\"nav-button\" onClick={() => onChangeRoute('signIn')}>Sign Out</button>  \n        </nav>\n      );\n    } else {\n        return (\n            <nav className=\"nav-bar\">\n                <button className=\"nav-button\" onClick={() => onChangeRoute('signIn')}>Sign In</button>\n                <button className=\"nav-button\" onClick={() => onChangeRoute('register')}>Register</button>\n            </nav>\n        );\n    }   \n}\n\nexport default Navigation;","import './RecognitionImage.css';\n\nimport React from 'react';\n\nconst RecognitionImage = ( { imageURL, box }) => {\n    return (\n        <div className=\"center\">\n            <div className=\"image-container\">\n                <img id=\"inputted-image\" src={imageURL} alt=\"\" className=\"submitted-image\"/>\n                <div className=\"bounding-box\" style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}></div>\n            </div>    \n        </div>\n            \n    );\n}\n\nexport default RecognitionImage;","import './Register.css';\n\nimport React, { Component } from 'react';\n\nconst validEmailRegex = \n    RegExp(/^(([^<>()[\\].,;:\\s@\"]+(.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+.)+[^<>()[\\].,;:\\s@\"]{2,})$/i);\n    \nclass Register extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            email: '',\n            password: '',\n            validationErrors: {\n                name : {\n                    message: '',\n                    display: false\n                },\n                email: {\n                    message: '',\n                    display: false\n                },\n                password: {\n                    message: '',\n                    display: false\n                }\n            }\n        };\n    }\n\n    onRegister = () => {\n        if(this.validateForm(this.state.validationErrors)) {\n            fetch('https://immense-refuge-48530.herokuapp.com/register',\n            {\n                method: 'post',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({\n                    name: this.state.name,\n                    email: this.state.email,\n                    password: this.state.password\n                })\n            })\n            .then(response => response.json())\n            .then(user => {\n                if (user.id) {\n                    this.props.loadUser(user);\n                    this.props.onChangeRoute('home');\n                }\n            })\n            .catch(err => console.log(err));\n        } else {\n            console.error('Invalid form');\n        }\n    }\n\n    onNameChange = (event) => {\n        if (this.validateInputChange(event))\n            this.setState({name: event.target.value});\n    }\n\n    onEmailChange = (event) => {\n        if (this.validateInputChange(event))\n            this.setState({email: event.target.value});\n    }\n\n    onPasswordChange = (event) => {\n        if (this.validateInputChange(event))\n            this.setState({password: event.target.value});\n    }\n\n    render() {\n        const nameErrors = this.state.validationErrors.name;\n        const emailErrors = this.state.validationErrors.email;\n        const passwordErrors = this.state.validationErrors.password;\n\n        return (\n            <div className=\"center\">\n                <div className=\"form-container\">\n                    <fieldset>\n                        <legend>Register</legend>\n                        <div className=\"input-item\">\n                            <label htmlFor=\"name\">Name</label>\n                            <input type=\"text\" id=\"name\" name=\"name\" onChange={this.onNameChange} />\n                            <span className={this.getInputStateClass(nameErrors.display)}>{nameErrors.message}</span>\n                        </div>\n                        <div className=\"input-item\">\n                            <label htmlFor=\"email\">Email</label>\n                            <input type=\"email\" id=\"email\" name=\"email\" onChange={this.onEmailChange} />\n                            <span className={this.getInputStateClass(emailErrors.display)}>{emailErrors.message}</span>\n                        </div>\n                        <div className=\"input-item\">\n                            <label htmlFor=\"password\">Password</label>\n                            <input type=\"password\" id=\"password\" name=\"password\" onChange={this.onPasswordChange} />\n                            <span className={this.getInputStateClass(passwordErrors.display)}>{passwordErrors.message}</span>\n                        </div>\n                        <div>\n                            <button className=\"register-button\" type=\"submit\" onClick={this.onRegister}>Register</button>\n                        </div>\n                    </fieldset>\n                </div>\n            </div>\n        );\n    }\n\n    validateInputChange = (event) => {\n        const { name, value } = event.target;\n        let errors = this.state.validationErrors;\n        switch(name) {\n            case 'name':\n                const isNameValid =  value.length >= 2;\n                errors.name.message = isNameValid ? '' : 'Name must be 2 or more characters';\n                errors.name.display= isNameValid ? false : true;\n                break;\n            case 'email':\n                const isEmailValid =  validEmailRegex.test(value);\n                errors.email.message = isEmailValid ? '' : 'Email is not valid';\n                errors.email.display= isEmailValid ? false : true;\n                break;\n            case 'password':\n                const isPasswordValid = value.length >= 8;\n                errors.password.message = isPasswordValid ? '' : 'Password must be 8 or more characters';\n                errors.password.display = isPasswordValid ? false : true;\n                break;\n            default:\n                throw Error('Invlaid input type');\n        }\n\n        this.setState({errors, [name]: value});\n    }\n\n    validateForm = (errors) => {\n        let valid = true;\n        if (this.state.name  === '' && this.state.email === '' && this.state.password === '') {\n            valid = false;\n        } else {\n            Object.values(errors).forEach(error  => {\n                if (error.message.length > 0)\n                    valid = false;\n            });\n        }\n\n        return valid;\n    }\n\n    getInputStateClass = (isError) => {\n        return isError ? 'error' : 'hidden';\n    }\n}\n\nexport default Register;","import './SignIn.css';\n\nimport React, { Component } from 'react';\n\nconst validEmailRegex = \n  RegExp(/^(([^<>()[\\].,;:\\s@\"]+(.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+.)+[^<>()[\\].,;:\\s@\"]{2,})$/i);\n\nclass SignIn extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: '',\n            password: '',\n            credentialsErrors: {\n                message: '',\n                display: false\n            },\n            validationErrors: {\n                email: {\n                    message: '',\n                    display: false\n                },\n                password: {\n                    message: '',\n                    display: false\n                }\n            }\n        };\n    }\n    \n    onEmailChange = (event) => {\n        if (this.validateInputChange(event))\n            this.setState({email: event.target.value});\n            this.clearCredentialsErrorsState();\n    }\n\n    onPasswordChange = (event) => {\n        if (this.validateInputChange(event))\n            this.setState({password: event.target.value});\n            this.clearCredentialsErrorsState();\n    }\n\n    onSubmit = () => {\n        if (this.validateForm(this.state.validationErrors)) {\n            fetch('https://immense-refuge-48530.herokuapp.com/signin',\n            {\n                method: 'post',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({\n                    email: this.state.email,\n                    password: this.state.password\n                })\n            })\n            .then(response => response.json())\n            .then(responseJson => {\n                this.handleSignInResponse(responseJson);\n            })\n            .catch(err => console.log(err));\n        } else {\n            console.error('Invalid form');\n        }\n    }\n\n    handleSignInResponse = (responseJson) => {\n        let errors = this.state.credentialsErrors;\n        if (responseJson === 'Incorrect credentials') {\n            errors = {\n                message: 'Email or password are incorrect',\n                display: true\n            };\n            this.setState({credentialsErrors: errors});\n        } else if (responseJson.id) {\n            this.clearCredentialsErrorsState();\n            this.setState({credentialsErrors: errors});\n            this.props.loadUser(responseJson);\n            this.props.onChangeRoute('home');\n        }\n    }\n\n    render() {\n       const { onChangeRoute } = this.props;\n       const emailErrors = this.state.validationErrors.email;\n       const passwordErrors = this.state.validationErrors.password;\n       const credentialsErrors = this.state.credentialsErrors;\n\n        return (\n            <div className=\"center\">\n                <div className=\"form-container\">\n                    <fieldset>\n                        <legend>Sign In</legend>\n                        <div className=\"input-item\">\n                            <label htmlFor=\"email\">Email</label>\n                            <input type=\"email\" id=\"email\" name=\"email\" onChange={this.onEmailChange} required/> \n                            <span className={this.getInputStateClass(emailErrors.display)}>{emailErrors.message}</span>    \n                        </div>\n                        <div className=\"input-item\">\n                            <label htmlFor=\"password\">Password</label>\n                            <input type=\"password\" id=\"password\" name=\"password\" onChange={this.onPasswordChange} required/> \n                            <span className={this.getInputStateClass(passwordErrors.display)}>{passwordErrors.message}</span>\n                        </div>\n                        <div className=\"submit-item\">\n                            <button className=\"sign-in-button\" onClick={this.onSubmit}>Sign In</button>\n                            <span className={this.getInputStateClass(credentialsErrors.display)}>{credentialsErrors.message}</span>\n                        </div>\n                        <div>\n                            <p className=\"register\" onClick={() => onChangeRoute('register')}>Register</p>\n                        </div>\n                    </fieldset>\n                </div>\n            </div>\n        );\n    }\n\n    validateInputChange = (event) => {\n        const { name, value } = event.target;\n        let errors = this.state.validationErrors;\n        switch(name) {\n            case 'email':\n                const isEmailValid =  validEmailRegex.test(value);\n                errors.email.message = isEmailValid ? '' : 'Email is not valid';\n                errors.email.display= isEmailValid ? false : true;\n                break;\n            case 'password':\n                const isPasswordValid = value.length >= 8;\n                errors.password.message = isPasswordValid ? '' : 'Password must be 8 or more characters';\n                errors.password.display = isPasswordValid ? false : true;\n                break;\n            default:\n                throw Error('Invlaid input type');\n        }\n\n        this.setState({errors, [name]: value});\n    }\n\n    validateForm = (errors) => {\n        let valid = true;\n        if (this.state.email === '' || this.state.password === '') {\n            valid = false;\n        } else {\n            Object.values(errors).forEach(error  => {\n                if (error.message.length > 0)\n                    valid = false;\n            });\n        }\n\n        return valid;\n    }\n\n    getInputStateClass = (isError) => {\n        return isError ? 'error' : 'hidden';\n    }\n\n    clearCredentialsErrorsState = () => {\n        let credentialsErrors = this.state.credentialsErrors;\n        credentialsErrors = {\n            message: '',\n            display: false\n        };\n        this.setState({credentialsErrors});\n    }\n}\n\nexport default SignIn;","import './UserRank.css'\n\nimport React from 'react';\n\nconst UserRank = ({name, submissions}) => {\n    return (\n        <div className=\"user-rank-section\">\n            <p className=\"descriptive-text\">\n                {`${name}, your submission count is`}\n            </p>\n            <p className=\"rank-number\">\n                {`${submissions}`}\n            </p>\n        </div>\n    );\n}\n\nexport default UserRank;","import './App.css';\n\nimport React, {Component, Fragment} from 'react';\n\nimport ImageLinkSubmitter from './components/imageLinkSubmitter/ImageLinkSubmitter';\nimport Logo from './components/logo/Logo';\nimport Navigation from './components/navigation/Navigation';\nimport Particles from 'react-particles-js';\nimport RecognitionImage from './components/recognitionImage/RecognitionImage';\nimport Register from './components/register/Register';\nimport SignIn from './components/signIn/SignIn';\nimport UserRank from './components/userRank/UserRank';\n\nconst particleParameters = {\n  particles: {\n    line_linked: {\n      shadow: {\n        enable: true,\n        color: \"#FFBC81\",\n        blur: 5\n      }\n    },\n    number: {\n      value: 50,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n};\n\nconst initialState = {\n  input: '',\n  imageURL: '',\n  box: {},\n  route: 'signIn',\n  routes: ['signIn', 'register', 'home'],\n  isSignedIn: false,\n  user: {\n      id: '',\n      name: '',\n      email: '',\n      submissions: 0,\n      dateJoined: ''\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = initialState;\n  }\n\n  loadUser = (data) => {\n    this.setState({user: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          submissions: data.submissions,\n          dateJoined: data.dateJoined\n      }\n    });\n  }\n\n  updateUserSubmissionCount = () => {\n    fetch('https://immense-refuge-48530.herokuapp.com/image',\n        {\n            method: 'put',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                id: this.state.user.id\n            })\n        })\n        .then(response => response.json())\n        .then(count => {\n            this.setState(Object.assign(this.state.user, {submissions: count}))\n        })\n        .catch(err => console.log(err));\n  }\n\ncalculateFaceLocation = (data) => {\n  const boundingBox = data.outputs[0].data.regions[0].region_info.bounding_box;\n  const inputtedImage = document.getElementById(\"inputted-image\");\n  const imageWidth = Number(inputtedImage.width);\n  const imageHeight = Number(inputtedImage.height);\n  return {\n    leftCol: boundingBox.left_col * imageWidth,\n    topRow: boundingBox.top_row * imageHeight,\n    rightCol: imageWidth - (boundingBox.right_col * imageWidth),\n    bottomRow: imageHeight - (boundingBox.bottom_row * imageHeight) \n  };\n}\n\nonChangeRoute = (route) => {\n  if(this.state.routes.includes(route)) {\n    if (route === 'signIn') {\n      this.setState(initialState);\n    } else if (route === 'home') {\n      this.setState({isSignedIn: true});\n    }\n    this.setState({route: route});\n  } else {\n    throw new Error('Invalid route');\n  }\n}\n\nsetBoxLocation = (boundingBox) => {\n  this.setState({box: boundingBox});\n}\n\nonInputChange = (event) => {\n  this.setState({input: event.target.value});\n}\n\nonImageSubmit = () => {\n  this.setState({imageURL: this.state.input})\n  fetch('https://immense-refuge-48530.herokuapp.com/imageUrl',\n        {\n            method: 'post',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                input: this.state.input\n            })\n        })\n  .then(response => response.json())\n  .then((response) => {\n    if(response) {\n      this.updateUserSubmissionCount();\n      this.setBoxLocation(this.calculateFaceLocation(response));\n    }\n  })\n  .catch(error => console.log(error));\n}\n\n  render() {\n    const { isSignedIn, route, imageURL, box, user } = this.state;\n    return (\n      <div className=\"App\">\n        <Particles className=\"particles-background\" params={particleParameters}/>\n        <Navigation onChangeRoute={this.onChangeRoute} isSignedIn={isSignedIn} />\n        { route === 'home' \n        ? <Fragment>\n            <Logo />\n            <UserRank name={user.name} submissions={user.submissions} />\n            <ImageLinkSubmitter onInputChange={this.onInputChange} onSubmit={this.onImageSubmit}/>\n            <RecognitionImage imageURL={imageURL} box={box} />\n        </Fragment>\n        : (\n          route === 'signIn'\n          ? <SignIn onChangeRoute={this.onChangeRoute} loadUser={this.loadUser}/>\n          : <Register onChangeRoute={this.onChangeRoute} loadUser={this.loadUser}/>\n          \n        )\n      }\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","import './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo_transparent.0e13690a.png\";"],"sourceRoot":""}